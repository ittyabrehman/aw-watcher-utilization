name: Create releases for Linux, Windows and MacOS & Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-package:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: [3.11]
        poetry-version: [1.3.2]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        run: pip install "poetry==${{ matrix.poetry-version }}"

      - name: Disable Poetry virtualenv creation
        run: poetry config virtualenvs.create false

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Build single-file executable
        run: |
          pyinstaller --onefile --clean \
            aw_watcher_utilization/watcher.py \
            --name aw-watcher-utilization

      - name: Package binary
        run: |
          if [[ "${{ runner.os }}" == "Linux" ]]; then
            tar czf aw-watcher-utilization-linux.tar.gz -C dist aw-watcher-utilization
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            tar czf aw-watcher-utilization-macos.tar.gz -C dist aw-watcher-utilization
          else
            powershell -Command "Compress-Archive dist\\aw-watcher-utilization.exe aw-watcher-utilization-windows.zip"
          fi

      # upload the packaged file as a workflow artifact so we can grab it later
      - name: Upload workflow artifact
        uses: actions/upload-artifact@v3
        with:
          name: packaged-${{ runner.os }}
          path: |
            aw-watcher-utilization-*.tar.gz
            aw-watcher-utilization-*.zip

  release:
    needs: build-and-package
    runs-on: ubuntu-latest
    steps:
      - name: Download Linux package
        if: needs.build-and-package.outputs['build-and-package.matrix.os'] == 'ubuntu-latest'
        uses: actions/download-artifact@v3
        with:
          name: packaged-ubuntu-latest

      - name: Download macOS package
        if: needs.build-and-package.outputs['build-and-package.matrix.os'] == 'macos-latest'
        uses: actions/download-artifact@v3
        with:
          name: packaged-macos-latest

      - name: Download Windows package
        if: needs.build-and-package.outputs['build-and-package.matrix.os'] == 'windows-latest'
        uses: actions/download-artifact@v3
        with:
          name: packaged-windows-latest

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          tag_name: build-${{ github.sha }}
          release_name: Build ${{ github.sha }}
          body: Automated build artifacts for commit ${{ github.sha }}.
          draft: false
          prerelease: false

      - name: Upload Linux asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: aw-watcher-utilization-linux.tar.gz
          asset_name: aw-watcher-utilization-linux.tar.gz
          asset_content_type: application/gzip

      - name: Upload macOS asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: aw-watcher-utilization-macos.tar.gz
          asset_name: aw-watcher-utilization-macos.tar.gz
          asset_content_type: application/gzip

      - name: Upload Windows asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: aw-watcher-utilization-windows.zip
          asset_name: aw-watcher-utilization-windows.zip
          asset_content_type: application/zip
