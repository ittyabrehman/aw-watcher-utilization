name: Create Release & Upload Binaries

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-release:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: [3.11]
        poetry-version: [1.3.2]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        run: pip install "poetry==${{ matrix.poetry-version }}"

      - name: Disable Poetry virtualenv creation
        run: poetry config virtualenvs.create false

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Build single-file executable
        run: pyinstaller --onefile --clean pyinstaller.spec

      # ───────────────────────────────────────────────────────────────────
      - name: Create or update GitHub Release
        id: release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          tag_name: "build-${{ github.sha }}"
          release_name: "Build ${{ github.sha }}"
          body: |
            Automated build artifacts for commit ${{ github.sha }}.
          draft: false
          prerelease: false

      - name: Upload Linux binary
        if: runner.os == 'Linux'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          upload_url: ${{ steps.release.outputs.upload_url }}
          asset_path: dist/aw-watcher-utilization
          asset_name: aw-watcher-utilization-linux
          asset_content_type: application/octet-stream

      - name: Upload macOS binary
        if: runner.os == 'macOS'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          upload_url: ${{ steps.release.outputs.upload_url }}
          asset_path: dist/aw-watcher-utilization
          asset_name: aw-watcher-utilization-macos
          asset_content_type: application/octet-stream

      - name: Upload Windows binary
        if: runner.os == 'Windows'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          upload_url: ${{ steps.release.outputs.upload_url }}
          asset_path: dist/aw-watcher-utilization.exe
          asset_name: aw-watcher-utilization-windows.exe
          asset_content_type: application/octet-stream
