name: Create releases for Linux, Windows and MacOS & Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-release:
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.11]
        poetry-version: [1.3.2]
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        run: pip install "poetry==${{ matrix.poetry-version }}"

      - name: Disable Poetry virtualenv creation
        run: poetry config virtualenvs.create false

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Build single-file executable
        run: |
          pyinstaller --onefile --clean \
            aw_watcher_utilization/watcher.py \
            --name aw-watcher-utilization

      - name: Package artifact
        shell: bash
        run: |
          if [[ "${{ runner.os }}" == "Linux" ]]; then
            tar czf aw-watcher-utilization-linux.tar.gz -C dist aw-watcher-utilization
            echo "ARTIFACT=aw-watcher-utilization-linux.tar.gz" >> $GITHUB_ENV
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            tar czf aw-watcher-utilization-macos.tar.gz -C dist aw-watcher-utilization
            echo "ARTIFACT=aw-watcher-utilization-macos.tar.gz" >> $GITHUB_ENV
          else
            # Windows
            powershell -Command "Compress-Archive -Path dist\\aw-watcher-utilization.exe -DestinationPath aw-watcher-utilization-windows.zip"
            echo "ARTIFACT=aw-watcher-utilization-windows.zip" >> $GITHUB_ENV
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT }}
          path: ${{ env.ARTIFACT }}
